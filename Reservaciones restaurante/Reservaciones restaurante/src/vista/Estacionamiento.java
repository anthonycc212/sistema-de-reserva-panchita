/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import conex.Conexion;


/**
 *
 * @author Johan
 */
public class Estacionamiento extends javax.swing.JFrame {

    // --- Estructura de Datos: Arreglo Unidimensional ---
    private String[] espaciosEstacionamiento = new String[8];

    // --- Variables para las imágenes ---
    private ImageIcon iconoAuto;
    private ImageIcon iconoVacio;
    
    // Arreglo para manejar los JLabels de los espacios de forma más fácil
    private JLabel[] labelsDeEstacionamiento;
    public Estacionamiento() {
        initComponents();
        
        // --- AÑADE ESTAS 4 LÍNEAS AQUÍ ---
        cargarIconos();
        inicializarLabels();
        cargarEstadoInicialEstacionamiento();
        configurarListeners();
        actualizarListaDeReservas();
        ejecutarBusqueda();
        
        setLocationRelativeTo(null);
    }

    Estacionamiento(frmsistema aThis, boolean b) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtCodReserva = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNumEstacionamiento = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtReservas = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        btnReservar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lblLugar1 = new javax.swing.JLabel();
        lblLugar2 = new javax.swing.JLabel();
        lblLugar3 = new javax.swing.JLabel();
        lblLugar4 = new javax.swing.JLabel();
        lblLugar5 = new javax.swing.JLabel();
        lblLugar6 = new javax.swing.JLabel();
        lblLugar7 = new javax.swing.JLabel();
        lblLugar8 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        txtCodReserva.setForeground(new java.awt.Color(153, 153, 153));
        txtCodReserva.setText("       ");
        txtCodReserva.setToolTipText("");
        txtCodReserva.setBorder(null);
        txtCodReserva.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtCodReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodReservaActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Cod.Cliente");

        txtCliente.setForeground(new java.awt.Color(153, 153, 153));
        txtCliente.setText("      ");
        txtCliente.setToolTipText("");
        txtCliente.setBorder(null);
        txtCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClienteActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Cliente");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Estacionamiento");

        txtNumEstacionamiento.setForeground(new java.awt.Color(153, 153, 153));
        txtNumEstacionamiento.setText("      ");
        txtNumEstacionamiento.setToolTipText("");
        txtNumEstacionamiento.setBorder(null);
        txtNumEstacionamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumEstacionamientoActionPerformed(evt);
            }
        });

        txtReservas.setColumns(20);
        txtReservas.setRows(5);
        jScrollPane1.setViewportView(txtReservas);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Reservas");

        btnCancelar.setText("CANCELAR");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnReservar.setText("RESERVAR");
        btnReservar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReservarActionPerformed(evt);
            }
        });

        btnBuscar.setText("BUSCAR");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(txtCodReserva)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(txtNumEstacionamiento)
                    .addComponent(txtCliente)
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnReservar, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                    .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCodReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNumEstacionamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReservar)
                    .addComponent(btnCancelar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBuscar)
                .addGap(22, 22, 22))
        );

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblLugar1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        lblLugar1.setForeground(new java.awt.Color(255, 255, 255));
        lblLugar1.setText("1");
        jPanel2.add(lblLugar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, 60, 110));

        lblLugar2.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        lblLugar2.setForeground(new java.awt.Color(255, 255, 255));
        lblLugar2.setText("2");
        jPanel2.add(lblLugar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 60, 60, 110));

        lblLugar3.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        lblLugar3.setForeground(new java.awt.Color(255, 255, 255));
        lblLugar3.setText("3");
        jPanel2.add(lblLugar3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 60, 60, 110));

        lblLugar4.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        lblLugar4.setForeground(new java.awt.Color(255, 255, 255));
        lblLugar4.setText("4");
        jPanel2.add(lblLugar4, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 60, 60, 110));

        lblLugar5.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        lblLugar5.setForeground(new java.awt.Color(255, 255, 255));
        lblLugar5.setText("5");
        jPanel2.add(lblLugar5, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 290, 60, 110));

        lblLugar6.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        lblLugar6.setForeground(new java.awt.Color(255, 255, 255));
        lblLugar6.setText("6");
        jPanel2.add(lblLugar6, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 290, 60, 110));

        lblLugar7.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        lblLugar7.setForeground(new java.awt.Color(255, 255, 255));
        lblLugar7.setText("7");
        jPanel2.add(lblLugar7, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 290, 60, 110));

        lblLugar8.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        lblLugar8.setForeground(new java.awt.Color(255, 255, 255));
        lblLugar8.setText("8");
        jPanel2.add(lblLugar8, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, 60, 110));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/estacionamiento.jpg"))); // NOI18N
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodReservaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodReservaActionPerformed

    private void txtClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtClienteActionPerformed

    private void txtNumEstacionamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumEstacionamientoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumEstacionamientoActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
      

        
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnReservarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReservarActionPerformed
         

      
           

           
        
    }//GEN-LAST:event_btnReservarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
       
    }//GEN-LAST:event_btnBuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Estacionamiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Estacionamiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Estacionamiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Estacionamiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

     
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnReservar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblLugar1;
    private javax.swing.JLabel lblLugar2;
    private javax.swing.JLabel lblLugar3;
    private javax.swing.JLabel lblLugar4;
    private javax.swing.JLabel lblLugar5;
    private javax.swing.JLabel lblLugar6;
    private javax.swing.JLabel lblLugar7;
    private javax.swing.JLabel lblLugar8;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtCodReserva;
    private javax.swing.JTextField txtNumEstacionamiento;
    private javax.swing.JTextArea txtReservas;
    // End of variables declaration//GEN-END:variables

    /**
     * Carga los íconos desde los archivos de imagen del proyecto.
     */
    private void cargarIconos() {
        try {
            iconoAuto = new ImageIcon(getClass().getResource("/imagenes/car_icon.png"));
            iconoVacio = new ImageIcon(getClass().getResource("/imagenes/empty_spot_icon.png"));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se pudieron cargar las imágenes de los estacionamientos.");
        }
    }

   /**
     * Agrupa todos los JLabels de los espacios en un arreglo para un manejo sencillo.
     */
    private void inicializarLabels() {
        labelsDeEstacionamiento = new JLabel[]{
            lblLugar1, lblLugar2, lblLugar3, lblLugar4, 
            lblLugar5, lblLugar6, lblLugar7, lblLugar8
        };
    }


    private void cargarEstadoInicialEstacionamiento() {
        Connection con = Conexion.getConexion();
        if (con == null) return;
        
        String sql = "SELECT codigo_reserva, estacionamiento FROM reservas WHERE estacionamiento IS NOT NULL";

        try (PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                int numLugar = rs.getInt("estacionamiento");
                if (numLugar >= 1 && numLugar <= 8) {
                    espaciosEstacionamiento[numLugar - 1] = rs.getString("codigo_reserva");
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar el estado de los estacionamientos: " + ex.getMessage());
        }
        
        actualizarVistaEstacionamiento();
    }

    /**
     * Configura los listeners para los botones y campos de texto.
     */
    private void configurarListeners() {
        txtCodReserva.addActionListener(e -> buscarClientePorReserva());
        btnReservar.addActionListener(e -> reservarEstacionamiento());
    
    // --- AÑADE ESTAS DOS LÍNEAS ---
        btnBuscar.addActionListener(e -> ejecutarBusqueda());
        btnCancelar.addActionListener(e -> cancelarReservaEstacionamiento());
}

    /**
     * Busca el nombre del cliente en la BD usando el código de reserva.
     */
    private void buscarClientePorReserva() {
        String codigoReserva = txtCodReserva.getText();
        if (codigoReserva.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un código de reserva.");
            return;
        }

        Connection con = Conexion.getConexion();
        if (con == null) return;
        
        String sql = "SELECT cliente FROM reservas WHERE codigo_reserva = ?";

        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, codigoReserva);
            
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    txtCliente.setText(rs.getString("cliente"));
                } else {
                    JOptionPane.showMessageDialog(this, "Código de reserva no encontrado.");
                    txtCliente.setText("");
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al consultar la base de datos: " + ex.getMessage());
        }
    }


     /**
     * Guarda la reserva del estacionamiento en la base de datos y actualiza la vista.
     */
    private void reservarEstacionamiento() {
        String codReserva = txtCodReserva.getText();
        String numEstacionamientoStr = txtNumEstacionamiento.getText().trim();

        if (codReserva.isEmpty() || numEstacionamientoStr.isEmpty() || txtCliente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe buscar una reserva válida y elegir un número de estacionamiento.");
            return;
        }

        try {
            int numLugar = Integer.parseInt(numEstacionamientoStr);

            if (numLugar < 1 || numLugar > 8) {
                JOptionPane.showMessageDialog(this, "Número de estacionamiento inválido. Debe ser entre 1 y 8.");
                return;
            }
            
            if (espaciosEstacionamiento[numLugar - 1] != null) {
                JOptionPane.showMessageDialog(this, "El estacionamiento " + numLugar + " ya está ocupado.");
                return;
            }

            Connection con = Conexion.getConexion();
            if (con == null) return;
            
            String sql = "UPDATE reservas SET estacionamiento = ? WHERE codigo_reserva = ?";

            try (PreparedStatement ps = con.prepareStatement(sql)) {
                ps.setInt(1, numLugar);
                ps.setString(2, codReserva);

                if (ps.executeUpdate() > 0) {
                    espaciosEstacionamiento[numLugar - 1] = codReserva;
                    actualizarVistaEstacionamiento();
                    JOptionPane.showMessageDialog(this, "¡Estacionamiento " + numLugar + " reservado con éxito!");
                    actualizarListaDeReservas();
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo realizar la reserva. Verifique el código.");
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El número de estacionamiento debe ser un valor numérico.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al actualizar la base de datos: " + ex.getMessage());
        }
    }

     /**
     * Actualiza los íconos en la pantalla para reflejar el estado actual (ocupado/libre).
     */
    private void actualizarVistaEstacionamiento() {
        for (int i = 0; i < espaciosEstacionamiento.length; i++) {
            boolean ocupado = espaciosEstacionamiento[i] != null;
            labelsDeEstacionamiento[i].setIcon(ocupado ? iconoAuto : iconoVacio);
        }
    }

    private void buscarPorEstacionamiento() {
    String numEstacionamientoStr = txtNumEstacionamiento.getText().trim();
    if (numEstacionamientoStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese un número de estacionamiento para buscar.");
        return;
    }

    try {
        int numLugar = Integer.parseInt(numEstacionamientoStr);
        if (numLugar < 1 || numLugar > 8) {
            JOptionPane.showMessageDialog(this, "Número de estacionamiento inválido.");
            return;
        }

        // Revisa nuestro arreglo local primero. Es más rápido que ir a la BD.
        String codigoReserva = espaciosEstacionamiento[numLugar - 1];
        if (codigoReserva == null) {
            JOptionPane.showMessageDialog(this, "El estacionamiento " + numLugar + " está libre.");
            txtCodReserva.setText("");
            txtCliente.setText("");
            return;
        }

        // Si hay un código, lo usamos para buscar el nombre del cliente.
        Connection con = Conexion.getConexion();
        if (con == null) return;
        
        String sql = "SELECT cliente FROM reservas WHERE codigo_reserva = ?";
        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, codigoReserva);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    txtCodReserva.setText(codigoReserva);
                    txtCliente.setText(rs.getString("cliente"));
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al buscar datos de la reserva: " + ex.getMessage());
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "El número de estacionamiento debe ser un valor numérico.");
    }
}

   private void cancelarReservaEstacionamiento() {
    String codigoReserva = txtCodReserva.getText().trim();
    if (codigoReserva.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Busque una reserva por código o por estacionamiento antes de cancelar.");
        return;
    }

    // Pide confirmación al usuario
    int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea cancelar la reserva de este estacionamiento?", "Confirmar cancelación", JOptionPane.YES_NO_OPTION);
    if (confirmacion != JOptionPane.YES_OPTION) {
        return;
    }

    Connection con = Conexion.getConexion();
    if (con == null) return;
    
    // Ponemos el estacionamiento a NULL en la base de datos
    String sql = "UPDATE reservas SET estacionamiento = 0 WHERE codigo_reserva = ?";
    try (PreparedStatement ps = con.prepareStatement(sql)) {
        ps.setString(1, codigoReserva);

        if (ps.executeUpdate() > 0) {
            // Buscamos en el arreglo qué lugar tenía esta reserva para liberarlo
            for (int i = 0; i < espaciosEstacionamiento.length; i++) {
                if (codigoReserva.equals(espaciosEstacionamiento[i])) {
                    espaciosEstacionamiento[i] = null; // Liberamos el espacio en el arreglo
                    break; 
                }
            }
            
            actualizarVistaEstacionamiento(); // Actualiza la UI para quitar el auto
            
            // Limpiamos los campos
            txtCodReserva.setText("");
            txtCliente.setText("");
            txtNumEstacionamiento.setText("");
            
            JOptionPane.showMessageDialog(this, "Reserva de estacionamiento cancelada con éxito.");
            actualizarListaDeReservas();
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró una reserva con ese código.");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al cancelar la reserva: " + ex.getMessage());
    }
}

    private void actualizarListaDeReservas() {
    // Limpiamos el cuadro de texto antes de llenarlo
    txtReservas.setText("");

    Connection con = Conexion.getConexion();
    if (con == null) return;

    // Seleccionamos todas las reservas que tienen un estacionamiento asignado (mayor a 0)
    String sql = "SELECT codigo_reserva, cliente, estacionamiento FROM reservas WHERE estacionamiento > 0 ORDER BY estacionamiento ASC";

    try (PreparedStatement ps = con.prepareStatement(sql);
         ResultSet rs = ps.executeQuery()) {
        
        StringBuilder sb = new StringBuilder();

        while (rs.next()) {
            String codReserva = rs.getString("codigo_reserva");
            String cliente = rs.getString("cliente");
            int numLugar = rs.getInt("estacionamiento");

            // Creamos una línea de texto con el formato deseado
            sb.append("Est. ").append(numLugar).append(": ")
              .append(cliente).append(" (").append(codReserva).append(")\n");
        }

        // Asignamos todo el texto generado al JTextArea
        txtReservas.setText(sb.toString());

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al cargar la lista de reservas: " + ex.getMessage());
    }
}
    private void ejecutarBusqueda() {
    String numEstacionamiento = txtNumEstacionamiento.getText().trim();
    String codCliente = txtCodReserva.getText().trim();

    if (!numEstacionamiento.isEmpty()) {
        // Si el campo de estacionamiento no está vacío, busca por estacionamiento.
        buscarPorEstacionamiento();
    } else if (!codCliente.isEmpty()) {
        // Si no, si el campo de código de cliente no está vacío, busca por cliente.
        buscarClientePorReserva();
    } else {
        // Si ambos están vacíos, pide al usuario que ingrese datos.
        JOptionPane.showMessageDialog(this, "Ingrese un código de cliente o un número de estacionamiento para buscar.");
    }
}
}

// Si ambos están vacíos, pide al usuario que ingrese datos.